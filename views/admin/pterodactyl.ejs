<% title = 'Admin â€” Pterodactyl' %>

<div class="bg-white rounded shadow p-6 max-w-7xl mx-auto">
	<h2 class="text-xl font-bold mb-4">Pterodactyl</h2>

	<form action="/admin/pterodactyl/save" method="post" class="space-y-4">
		<div>
			<label class="block text-sm font-medium text-gray-700">Base URL</label>
			<input id="ptero-url" name="pterodactyl.url" value="<%= (pterodactyl && pterodactyl.url) ? pterodactyl.url : '' %>" class="mt-1 block w-full p-2 border rounded" placeholder="https://panel.example.com" />
		</div>

		<div>
			<label class="block text-sm font-medium text-gray-700">Application API Key</label>
			<input id="ptero-key" name="pterodactyl.api_key" value="<%= (pterodactyl && pterodactyl.api_key) ? pterodactyl.api_key : '' %>" class="mt-1 block w-full p-2 border rounded" placeholder="Application API Key" />
		</div>

		<div class="flex items-center gap-2">
			<button id="test-ptero" type="button" class="px-3 py-1 bg-blue-600 text-white rounded">Test connection</button>
			<span id="test-result" class="text-sm"></span>
		</div>

		<div class="pt-4 border-t flex justify-end">
			<button type="submit" class="px-4 py-2 bg-green-600 text-white rounded">Save</button>
		</div>
	</form>
</div>

	<div class="bg-white rounded shadow p-6 max-w-7xl mx-auto mt-6">
	  <h3 class="text-lg font-semibold mb-3">Nodes summary</h3>
	  <div id="ptero-nodes" class="text-sm text-gray-700">Loading nodes...</div>
	</div>

<script>
document.getElementById('test-ptero').addEventListener('click', async () => {
	const url = document.getElementById('ptero-url').value.trim();
	const apiKey = document.getElementById('ptero-key').value.trim();
	const resultEl = document.getElementById('test-result');
	resultEl.textContent = 'Testing...';
	try {
		const res = await fetch('/admin/pterodactyl/test', {
			method: 'POST',
			headers: { 'Content-Type': 'application/json' },
			body: JSON.stringify({ url, apiKey })
		});
		const json = await res.json();
		if (json.ok) {
			resultEl.textContent = 'Success: ' + (json.message || 'Connected');
			resultEl.style.color = 'green';
		} else {
			resultEl.textContent = 'Failed: ' + (json.error && (typeof json.error === 'string' ? json.error : JSON.stringify(json.error)));
			resultEl.style.color = 'red';
		}
	} catch (err) {
		resultEl.textContent = 'Error: ' + err.message;
		resultEl.style.color = 'red';
	}
});

// fetch nodes summary on load
async function loadNodes() {
	const url = document.getElementById('ptero-url').value.trim();
	const apiKey = document.getElementById('ptero-key').value.trim();
	const container = document.getElementById('ptero-nodes');
	container.textContent = 'Loading nodes...';
	try {
		const res = await fetch('/admin/pterodactyl/nodes', {
			method: 'POST',
			headers: { 'Content-Type': 'application/json' },
			body: JSON.stringify({ url, apiKey })
		});
		const json = await res.json();
		if (!json.ok) {
			container.textContent = 'Could not load nodes: ' + (json.error || JSON.stringify(json));
			container.style.color = 'red';
			return;
		}
		container.style.color = '';
		const nodes = json.nodes || [];
		if (!nodes.length) {
			container.textContent = 'No nodes found.';
			return;
		}

		// build HTML
		let html = `<div class="mb-2">Total nodes: <strong>${json.totalNodes}</strong></div>`;
		html += '<div class="space-y-2">';
			nodes.forEach(n => {
				const totalMem = (n.total_memory || 0);
				const usedMem = (n.used_memory || 0);
				const totalDisk = (n.total_disk || 0);
				const usedDisk = (n.used_disk || 0);
				const fmt = (v) => (v === null ? '-' : (v >= 1024 ? (Math.round((v/1024)*10)/10 + ' GB') : (v + ' MB')));

				html += `<div class="p-2 border rounded">
					<div class="flex items-center justify-between">
						<div>
							<div class="font-semibold">${n.name}</div>
							<div class="text-xs text-gray-500">${n.location ? 'Location: ' + n.location : ''} ${n.fqdn ? ' / ' + n.fqdn : ''} (id:${n.id})</div>
						</div>
						<div class="text-sm text-right">
							<div>Servers: <span class="font-medium">${n.server_count || 0}</span></div>
						</div>
					</div>
					<div class="mt-2 grid grid-cols-2 gap-4 text-sm">
						<div>RAM: <span class="font-medium">${fmt(usedMem)}</span> / ${fmt(totalMem)}</div>
						<div>Disk: <span class="font-medium">${fmt(usedDisk)}</span> / ${fmt(totalDisk)}</div>
					</div>
				</div>`;
			});
		html += '</div>';
		container.innerHTML = html;
	} catch (err) {
		container.textContent = 'Error loading nodes: ' + err.message;
		container.style.color = 'red';
	}
}

// load nodes when page loads
window.addEventListener('load', () => {
	setTimeout(loadNodes, 300);
});
</script>
